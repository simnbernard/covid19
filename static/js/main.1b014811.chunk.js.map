{"version":3,"sources":["pages/loading/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","createStyles","fullSize","height","width","overflowY","container","display","alignItems","justifyContent","LoadingPage","classes","className","LinearProgress","variant","data-theme","lang","dir","href","homePagePromise","HomePage","React","lazy","ReactGA","initialize","pageview","theme","createMuiTheme","palette","type","primary","main","success","background","default","paper","App","useState","loading","setLoading","setTimeout","ThemeProvider","CssBaseline","basename","Suspense","fallback","exact","path","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sSAIMA,EAAYC,aAAW,kBAC3BC,YAAa,CACXC,SAAU,CACRC,OAAQ,QACRC,MAAO,OACPC,UAAW,UAEbC,UAAW,CACTH,OAAQ,OACRC,MAAO,OACPG,QAAS,OACTC,WAAY,SACZC,eAAgB,eA0BPC,EArBK,WAClB,IAAMC,EAAUZ,IAEhB,OACE,yBAAKa,UAAWD,EAAQT,UACtB,kBAACW,EAAA,EAAD,CAAgBC,QAAQ,UACxB,yBAAKF,UAAWD,EAAQL,WACtB,gCAAYM,UAAU,gBAAgBG,aAAW,QAC/C,uBAAGC,KAAK,MAAMC,IAAI,OAChB,uBAAGC,KAAK,2BAAR,+BAFJ,2CAKE,uBAAGA,KAAK,qFAAR,sB,QCtBJC,EAAkB,oDAClBC,EAAWC,IAAMC,MAAK,kBAAMH,KAElCI,IAAQC,WAAW,iBACnBD,IAAQE,SAAS,IAEjB,IAAMC,EAAQC,YAAe,CAC3BC,QAAS,CACPC,KAAM,OACNC,QAAS,CACPC,KAAM,WAERC,QAAS,CACPD,KAAM,WAERE,WAAY,CACVC,QAAS,UACTC,MAAO,cAkCEC,EA7BH,WAAoB,IAAD,EACCC,oBAAS,GADV,mBACtBC,EADsB,KACbC,EADa,KAM7B,OAJAC,YAAW,WACTD,GAAW,KACV,KAGD,kBAACE,EAAA,EAAD,CAAef,MAAOA,GACpB,kBAACgB,EAAA,EAAD,MACCJ,EACC,kBAAC,EAAD,MAEA,kBAAC,IAAD,CAAQK,SAAS,YACf,kBAAC,IAAMC,SAAP,CAAgBC,SAAU,MACxB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC3B,EAAD,OAEF,kBAAC,IAAD,CAAO2B,KAAK,KACV,kBAAC,IAAD,CAAUC,GAAG,YCvCTC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1b014811.chunk.js","sourcesContent":["import { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport { LinearProgress } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    fullSize: {\n      height: \"100vh\",\n      width: \"100%\",\n      overflowY: \"hidden\"\n    },\n    container: {\n      height: \"100%\",\n      width: \"100%\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    }\n  })\n);\n\nconst LoadingPage = (): JSX.Element => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.fullSize}>\n      <LinearProgress variant=\"query\" />\n      <div className={classes.container}>\n        <blockquote className=\"twitter-tweet\" data-theme=\"dark\">\n          <p lang=\"und\" dir=\"ltr\">\n            <a href=\"https://t.co/8d08yfg9E2\">pic.twitter.com/8d08yfg9E2</a>\n          </p>\n          &mdash; Emmanuel Macron (@EmmanuelMacron)\n          <a href=\"https://twitter.com/EmmanuelMacron/status/1239674643822325760?ref_src=twsrc%5Etfw\">\n            March 16, 2020\n          </a>\n        </blockquote>\n      </div>\n    </div>\n  );\n};\n\nexport default LoadingPage;\n","import React, { useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\nimport { createMuiTheme, CssBaseline, ThemeProvider } from \"@material-ui/core\";\nimport LoadingPage from \"./pages/loading\";\nimport ReactGA from \"react-ga\";\n\nconst homePagePromise = import(\"./pages/home\");\nconst HomePage = React.lazy(() => homePagePromise);\n\nReactGA.initialize(\"UA-85587908-2\");\nReactGA.pageview(\"\");\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary: {\n      main: \"#f44336\"\n    },\n    success: {\n      main: \"#4caf50\"\n    },\n    background: {\n      default: \"#191919\",\n      paper: \"#212121\"\n    }\n  }\n});\n\nconst App = (): JSX.Element => {\n  const [loading, setLoading] = useState(true);\n  setTimeout(() => {\n    setLoading(false);\n  }, 2000);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      {loading ? (\n        <LoadingPage />\n      ) : (\n        <Router basename=\"/covid19\">\n          <React.Suspense fallback={null}>\n            <Switch>\n              <Route exact path=\"/\">\n                <HomePage />\n              </Route>\n              <Route path=\"*\">\n                <Redirect to=\"/\" />\n              </Route>\n            </Switch>\n          </React.Suspense>\n        </Router>\n      )}\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}